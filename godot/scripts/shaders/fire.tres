[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://cykppim8lxldi"]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_mg50l"]
parameter_name = "Texture2DParameter"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_wlgen"]
output_port_for_preview = 0
operator = 5

[sub_resource type="VisualShaderNodeUVPolarCoord" id="VisualShaderNodeUVPolarCoord_hdndc"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_68cls"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_i1i2f"]
source = 5

[resource]
code = "shader_type particles;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
	vec2 n_out4p0;
// UVPolarCoord:4
		vec2 n_in4p1 = vec2(0.50000, 0.50000);
		float n_in4p2 = 1.00000;
		float n_in4p3 = 1.00000;
		{
			vec2 __dir = vec2(0.0) - n_in4p1;
			float __radius = length(__dir) * 2.0;
			float __angle = atan(__dir.y, __dir.x) * 1.0 / (PI * 2.0);
			n_out4p0 = vec2(__radius * n_in4p2, __angle * n_in4p3);
		}


// FloatOp:3
		float n_in3p1 = 0.00000;
		float n_out3p0 = pow(n_out4p0.x, n_in3p1);


// StartOutput:0
		ACTIVE = n_out3p0 > 0.0 ? true : false;
		if(ACTIVE) {
			if (RESTART_POSITION) {
				TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
				if (RESTART_VELOCITY) {
					VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
				}
				TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
			}
		}


	}
}

"
graph_offset = Vector2(1.29838, 3.08822)
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/0/position = Vector2(360, 140)
nodes/start/2/node = SubResource("VisualShaderNodeTexture2DParameter_mg50l")
nodes/start/2/position = Vector2(-740, 80)
nodes/start/3/node = SubResource("VisualShaderNodeFloatOp_wlgen")
nodes/start/3/position = Vector2(100, 220)
nodes/start/4/node = SubResource("VisualShaderNodeUVPolarCoord_hdndc")
nodes/start/4/position = Vector2(-140, 120)
nodes/start/5/node = SubResource("VisualShaderNodeUVFunc_68cls")
nodes/start/5/position = Vector2(-320, 360)
nodes/start/6/node = SubResource("VisualShaderNodeTexture_i1i2f")
nodes/start/6/position = Vector2(-400, 120)
nodes/start/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 3, 0, 2, 0, 6, 2)
